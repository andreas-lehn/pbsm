# Generated from StackMachineLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,11,328,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,
        3,2,70,8,2,1,2,1,2,3,2,74,8,2,3,2,76,8,2,1,2,1,2,3,2,80,8,2,1,2,
        1,2,3,2,84,8,2,1,2,1,2,3,2,88,8,2,1,2,1,2,3,2,92,8,2,3,2,94,8,2,
        1,3,1,3,1,3,5,3,99,8,3,10,3,12,3,102,9,3,1,3,4,3,105,8,3,11,3,12,
        3,106,3,3,109,8,3,1,4,1,4,1,4,1,5,1,5,1,6,1,6,5,6,118,8,6,10,6,12,
        6,121,9,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,4,9,131,8,9,11,9,12,9,
        132,1,9,1,9,1,10,1,10,5,10,139,8,10,10,10,12,10,142,9,10,1,10,1,
        10,1,11,3,11,147,8,11,1,12,1,12,1,12,1,12,3,12,153,8,12,1,12,5,12,
        156,8,12,10,12,12,12,159,9,12,1,12,1,12,1,12,1,12,1,12,3,12,166,
        8,12,1,12,5,12,169,8,12,10,12,12,12,172,9,12,1,12,3,12,175,8,12,
        1,13,1,13,1,13,1,13,1,13,5,13,182,8,13,10,13,12,13,185,9,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,195,8,13,10,13,12,13,198,
        9,13,1,13,1,13,1,13,3,13,203,8,13,1,14,1,14,1,14,1,14,3,14,209,8,
        14,3,14,211,8,14,1,15,3,15,214,8,15,1,15,1,15,1,16,4,16,219,8,16,
        11,16,12,16,220,1,16,3,16,224,8,16,1,16,1,16,3,16,228,8,16,1,16,
        4,16,231,8,16,11,16,12,16,232,1,16,3,16,236,8,16,1,17,5,17,239,8,
        17,10,17,12,17,242,9,17,1,17,1,17,4,17,246,8,17,11,17,12,17,247,
        1,17,4,17,251,8,17,11,17,12,17,252,1,17,3,17,256,8,17,1,18,1,18,
        1,18,5,18,261,8,18,10,18,12,18,264,9,18,1,18,1,18,1,18,1,18,5,18,
        270,8,18,10,18,12,18,273,9,18,1,18,3,18,276,8,18,1,19,1,19,1,19,
        1,19,1,19,5,19,283,8,19,10,19,12,19,286,9,19,1,19,1,19,1,19,1,19,
        1,19,1,19,1,19,1,19,5,19,296,8,19,10,19,12,19,299,9,19,1,19,1,19,
        1,19,3,19,304,8,19,1,20,1,20,3,20,308,8,20,1,21,3,21,311,8,21,1,
        22,3,22,314,8,22,1,23,3,23,317,8,23,1,24,1,24,1,24,1,25,1,25,3,25,
        324,8,25,1,26,3,26,327,8,26,4,183,196,284,297,0,27,1,1,3,2,5,3,7,
        4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,0,25,0,27,0,29,0,31,0,33,
        0,35,0,37,0,39,0,41,0,43,0,45,0,47,0,49,0,51,0,53,0,1,0,19,2,0,85,
        85,117,117,2,0,70,70,102,102,2,0,82,82,114,114,2,0,66,66,98,98,1,
        0,49,57,1,0,48,57,5,0,40,41,91,91,93,93,123,123,125,125,2,0,9,9,
        32,32,2,0,10,10,12,13,2,0,43,43,45,45,4,0,10,10,13,13,39,39,92,92,
        4,0,10,10,13,13,34,34,92,92,1,0,92,92,2,0,69,69,101,101,5,0,0,9,
        11,12,14,38,40,91,93,127,5,0,0,9,11,12,14,33,35,91,93,127,2,0,0,
        91,93,127,1,0,0,127,7,0,33,39,42,47,59,90,92,92,94,122,124,124,126,
        126,360,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,
        0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
        0,0,0,21,1,0,0,0,1,55,1,0,0,0,3,60,1,0,0,0,5,93,1,0,0,0,7,108,1,
        0,0,0,9,110,1,0,0,0,11,113,1,0,0,0,13,115,1,0,0,0,15,122,1,0,0,0,
        17,125,1,0,0,0,19,130,1,0,0,0,21,136,1,0,0,0,23,146,1,0,0,0,25,174,
        1,0,0,0,27,202,1,0,0,0,29,210,1,0,0,0,31,213,1,0,0,0,33,235,1,0,
        0,0,35,255,1,0,0,0,37,275,1,0,0,0,39,303,1,0,0,0,41,307,1,0,0,0,
        43,310,1,0,0,0,45,313,1,0,0,0,47,316,1,0,0,0,49,318,1,0,0,0,51,323,
        1,0,0,0,53,326,1,0,0,0,55,56,5,84,0,0,56,57,5,114,0,0,57,58,5,117,
        0,0,58,59,5,101,0,0,59,2,1,0,0,0,60,61,5,70,0,0,61,62,5,97,0,0,62,
        63,5,108,0,0,63,64,5,115,0,0,64,65,5,101,0,0,65,4,1,0,0,0,66,76,
        7,0,0,0,67,69,7,1,0,0,68,70,7,2,0,0,69,68,1,0,0,0,69,70,1,0,0,0,
        70,76,1,0,0,0,71,73,7,2,0,0,72,74,7,1,0,0,73,72,1,0,0,0,73,74,1,
        0,0,0,74,76,1,0,0,0,75,66,1,0,0,0,75,67,1,0,0,0,75,71,1,0,0,0,75,
        76,1,0,0,0,76,79,1,0,0,0,77,80,3,25,12,0,78,80,3,27,13,0,79,77,1,
        0,0,0,79,78,1,0,0,0,80,94,1,0,0,0,81,83,7,3,0,0,82,84,7,2,0,0,83,
        82,1,0,0,0,83,84,1,0,0,0,84,88,1,0,0,0,85,86,7,2,0,0,86,88,7,3,0,
        0,87,81,1,0,0,0,87,85,1,0,0,0,88,91,1,0,0,0,89,92,3,37,18,0,90,92,
        3,39,19,0,91,89,1,0,0,0,91,90,1,0,0,0,92,94,1,0,0,0,93,75,1,0,0,
        0,93,87,1,0,0,0,94,6,1,0,0,0,95,96,3,23,11,0,96,100,7,4,0,0,97,99,
        7,5,0,0,98,97,1,0,0,0,99,102,1,0,0,0,100,98,1,0,0,0,100,101,1,0,
        0,0,101,109,1,0,0,0,102,100,1,0,0,0,103,105,5,48,0,0,104,103,1,0,
        0,0,105,106,1,0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,107,109,1,0,
        0,0,108,95,1,0,0,0,108,104,1,0,0,0,109,8,1,0,0,0,110,111,3,23,11,
        0,111,112,3,33,16,0,112,10,1,0,0,0,113,114,7,6,0,0,114,12,1,0,0,
        0,115,119,3,53,26,0,116,118,3,51,25,0,117,116,1,0,0,0,118,121,1,
        0,0,0,119,117,1,0,0,0,119,120,1,0,0,0,120,14,1,0,0,0,121,119,1,0,
        0,0,122,123,5,58,0,0,123,124,3,13,6,0,124,16,1,0,0,0,125,126,3,31,
        15,0,126,127,1,0,0,0,127,128,6,8,0,0,128,18,1,0,0,0,129,131,7,7,
        0,0,130,129,1,0,0,0,131,132,1,0,0,0,132,130,1,0,0,0,132,133,1,0,
        0,0,133,134,1,0,0,0,134,135,6,9,0,0,135,20,1,0,0,0,136,140,5,35,
        0,0,137,139,8,8,0,0,138,137,1,0,0,0,139,142,1,0,0,0,140,138,1,0,
        0,0,140,141,1,0,0,0,141,143,1,0,0,0,142,140,1,0,0,0,143,144,6,10,
        0,0,144,22,1,0,0,0,145,147,7,9,0,0,146,145,1,0,0,0,146,147,1,0,0,
        0,147,24,1,0,0,0,148,157,5,39,0,0,149,152,5,92,0,0,150,153,3,31,
        15,0,151,153,9,0,0,0,152,150,1,0,0,0,152,151,1,0,0,0,153,156,1,0,
        0,0,154,156,8,10,0,0,155,149,1,0,0,0,155,154,1,0,0,0,156,159,1,0,
        0,0,157,155,1,0,0,0,157,158,1,0,0,0,158,160,1,0,0,0,159,157,1,0,
        0,0,160,175,5,39,0,0,161,170,5,34,0,0,162,165,5,92,0,0,163,166,3,
        31,15,0,164,166,9,0,0,0,165,163,1,0,0,0,165,164,1,0,0,0,166,169,
        1,0,0,0,167,169,8,11,0,0,168,162,1,0,0,0,168,167,1,0,0,0,169,172,
        1,0,0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,173,1,0,0,0,172,170,
        1,0,0,0,173,175,5,34,0,0,174,148,1,0,0,0,174,161,1,0,0,0,175,26,
        1,0,0,0,176,177,5,39,0,0,177,178,5,39,0,0,178,179,5,39,0,0,179,183,
        1,0,0,0,180,182,3,29,14,0,181,180,1,0,0,0,182,185,1,0,0,0,183,184,
        1,0,0,0,183,181,1,0,0,0,184,186,1,0,0,0,185,183,1,0,0,0,186,187,
        5,39,0,0,187,188,5,39,0,0,188,203,5,39,0,0,189,190,5,34,0,0,190,
        191,5,34,0,0,191,192,5,34,0,0,192,196,1,0,0,0,193,195,3,29,14,0,
        194,193,1,0,0,0,195,198,1,0,0,0,196,197,1,0,0,0,196,194,1,0,0,0,
        197,199,1,0,0,0,198,196,1,0,0,0,199,200,5,34,0,0,200,201,5,34,0,
        0,201,203,5,34,0,0,202,176,1,0,0,0,202,189,1,0,0,0,203,28,1,0,0,
        0,204,211,8,12,0,0,205,208,5,92,0,0,206,209,3,31,15,0,207,209,9,
        0,0,0,208,206,1,0,0,0,208,207,1,0,0,0,209,211,1,0,0,0,210,204,1,
        0,0,0,210,205,1,0,0,0,211,30,1,0,0,0,212,214,5,13,0,0,213,212,1,
        0,0,0,213,214,1,0,0,0,214,215,1,0,0,0,215,216,5,10,0,0,216,32,1,
        0,0,0,217,219,7,5,0,0,218,217,1,0,0,0,219,220,1,0,0,0,220,218,1,
        0,0,0,220,221,1,0,0,0,221,224,1,0,0,0,222,224,3,35,17,0,223,218,
        1,0,0,0,223,222,1,0,0,0,224,225,1,0,0,0,225,227,7,13,0,0,226,228,
        7,9,0,0,227,226,1,0,0,0,227,228,1,0,0,0,228,230,1,0,0,0,229,231,
        7,5,0,0,230,229,1,0,0,0,231,232,1,0,0,0,232,230,1,0,0,0,232,233,
        1,0,0,0,233,236,1,0,0,0,234,236,3,35,17,0,235,223,1,0,0,0,235,234,
        1,0,0,0,236,34,1,0,0,0,237,239,7,5,0,0,238,237,1,0,0,0,239,242,1,
        0,0,0,240,238,1,0,0,0,240,241,1,0,0,0,241,243,1,0,0,0,242,240,1,
        0,0,0,243,245,5,46,0,0,244,246,7,5,0,0,245,244,1,0,0,0,246,247,1,
        0,0,0,247,245,1,0,0,0,247,248,1,0,0,0,248,256,1,0,0,0,249,251,7,
        5,0,0,250,249,1,0,0,0,251,252,1,0,0,0,252,250,1,0,0,0,252,253,1,
        0,0,0,253,254,1,0,0,0,254,256,5,46,0,0,255,240,1,0,0,0,255,250,1,
        0,0,0,256,36,1,0,0,0,257,262,5,39,0,0,258,261,3,43,21,0,259,261,
        3,49,24,0,260,258,1,0,0,0,260,259,1,0,0,0,261,264,1,0,0,0,262,260,
        1,0,0,0,262,263,1,0,0,0,263,265,1,0,0,0,264,262,1,0,0,0,265,276,
        5,39,0,0,266,271,5,34,0,0,267,270,3,45,22,0,268,270,3,49,24,0,269,
        267,1,0,0,0,269,268,1,0,0,0,270,273,1,0,0,0,271,269,1,0,0,0,271,
        272,1,0,0,0,272,274,1,0,0,0,273,271,1,0,0,0,274,276,5,34,0,0,275,
        257,1,0,0,0,275,266,1,0,0,0,276,38,1,0,0,0,277,278,5,39,0,0,278,
        279,5,39,0,0,279,280,5,39,0,0,280,284,1,0,0,0,281,283,3,41,20,0,
        282,281,1,0,0,0,283,286,1,0,0,0,284,285,1,0,0,0,284,282,1,0,0,0,
        285,287,1,0,0,0,286,284,1,0,0,0,287,288,5,39,0,0,288,289,5,39,0,
        0,289,304,5,39,0,0,290,291,5,34,0,0,291,292,5,34,0,0,292,293,5,34,
        0,0,293,297,1,0,0,0,294,296,3,41,20,0,295,294,1,0,0,0,296,299,1,
        0,0,0,297,298,1,0,0,0,297,295,1,0,0,0,298,300,1,0,0,0,299,297,1,
        0,0,0,300,301,5,34,0,0,301,302,5,34,0,0,302,304,5,34,0,0,303,277,
        1,0,0,0,303,290,1,0,0,0,304,40,1,0,0,0,305,308,3,47,23,0,306,308,
        3,49,24,0,307,305,1,0,0,0,307,306,1,0,0,0,308,42,1,0,0,0,309,311,
        7,14,0,0,310,309,1,0,0,0,311,44,1,0,0,0,312,314,7,15,0,0,313,312,
        1,0,0,0,314,46,1,0,0,0,315,317,7,16,0,0,316,315,1,0,0,0,317,48,1,
        0,0,0,318,319,5,92,0,0,319,320,7,17,0,0,320,50,1,0,0,0,321,324,3,
        53,26,0,322,324,7,5,0,0,323,321,1,0,0,0,323,322,1,0,0,0,324,52,1,
        0,0,0,325,327,7,18,0,0,326,325,1,0,0,0,327,54,1,0,0,0,52,0,69,73,
        75,79,83,87,91,93,100,106,108,119,132,140,146,152,155,157,165,168,
        170,174,183,196,202,208,210,213,220,223,227,232,235,240,247,252,
        255,260,262,269,271,275,284,297,303,307,310,313,316,323,326,1,0,
        1,0
    ]

class StackMachineLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    TRUE = 1
    FALSE = 2
    STRING = 3
    INTEGER = 4
    FLOAT = 5
    MARKER = 6
    NAME = 7
    NAME_REF = 8
    NEWLINE = 9
    WS = 10
    COMMENT = 11

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'True'", "'False'" ]

    symbolicNames = [ "<INVALID>",
            "TRUE", "FALSE", "STRING", "INTEGER", "FLOAT", "MARKER", "NAME", 
            "NAME_REF", "NEWLINE", "WS", "COMMENT" ]

    ruleNames = [ "TRUE", "FALSE", "STRING", "INTEGER", "FLOAT", "MARKER", 
                  "NAME", "NAME_REF", "NEWLINE", "WS", "COMMENT", "PREFIX", 
                  "SHORT_STRING", "LONG_STRING", "LONG_STRING_ITEM", "RN", 
                  "EXPONENT_OR_POINT_FLOAT", "POINT_FLOAT", "SHORT_BYTES", 
                  "LONG_BYTES", "LONG_BYTES_ITEM", "SHORT_BYTES_CHAR_NO_SINGLE_QUOTE", 
                  "SHORT_BYTES_CHAR_NO_DOUBLE_QUOTE", "LONG_BYTES_CHAR", 
                  "BYTES_ESCAPE_SEQ", "ID_CONTINUE", "ID_START" ]

    grammarFileName = "StackMachineLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


