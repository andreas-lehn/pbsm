# Generated from StackMachineLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,11,321,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,
        0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,3,2,68,8,2,
        1,2,1,2,3,2,72,8,2,3,2,74,8,2,1,2,1,2,3,2,78,8,2,1,2,1,2,3,2,82,
        8,2,1,2,1,2,3,2,86,8,2,1,2,1,2,3,2,90,8,2,3,2,92,8,2,1,3,1,3,5,3,
        96,8,3,10,3,12,3,99,9,3,1,3,4,3,102,8,3,11,3,12,3,103,3,3,106,8,
        3,1,4,1,4,1,5,1,5,1,6,1,6,5,6,114,8,6,10,6,12,6,117,9,6,1,7,1,7,
        1,7,1,8,1,8,1,8,1,8,1,9,4,9,127,8,9,11,9,12,9,128,1,9,1,9,1,10,1,
        10,5,10,135,8,10,10,10,12,10,138,9,10,1,10,1,10,1,11,1,11,1,11,1,
        11,3,11,146,8,11,1,11,5,11,149,8,11,10,11,12,11,152,9,11,1,11,1,
        11,1,11,1,11,1,11,3,11,159,8,11,1,11,5,11,162,8,11,10,11,12,11,165,
        9,11,1,11,3,11,168,8,11,1,12,1,12,1,12,1,12,1,12,5,12,175,8,12,10,
        12,12,12,178,9,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,5,12,188,
        8,12,10,12,12,12,191,9,12,1,12,1,12,1,12,3,12,196,8,12,1,13,1,13,
        1,13,1,13,3,13,202,8,13,3,13,204,8,13,1,14,3,14,207,8,14,1,14,1,
        14,1,15,4,15,212,8,15,11,15,12,15,213,1,15,3,15,217,8,15,1,15,1,
        15,3,15,221,8,15,1,15,4,15,224,8,15,11,15,12,15,225,1,15,3,15,229,
        8,15,1,16,5,16,232,8,16,10,16,12,16,235,9,16,1,16,1,16,4,16,239,
        8,16,11,16,12,16,240,1,16,4,16,244,8,16,11,16,12,16,245,1,16,3,16,
        249,8,16,1,17,1,17,1,17,5,17,254,8,17,10,17,12,17,257,9,17,1,17,
        1,17,1,17,1,17,5,17,263,8,17,10,17,12,17,266,9,17,1,17,3,17,269,
        8,17,1,18,1,18,1,18,1,18,1,18,5,18,276,8,18,10,18,12,18,279,9,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,5,18,289,8,18,10,18,12,18,
        292,9,18,1,18,1,18,1,18,3,18,297,8,18,1,19,1,19,3,19,301,8,19,1,
        20,3,20,304,8,20,1,21,3,21,307,8,21,1,22,3,22,310,8,22,1,23,1,23,
        1,23,1,24,1,24,3,24,317,8,24,1,25,3,25,320,8,25,4,176,189,277,290,
        0,26,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,0,25,
        0,27,0,29,0,31,0,33,0,35,0,37,0,39,0,41,0,43,0,45,0,47,0,49,0,51,
        0,1,0,19,2,0,85,85,117,117,2,0,70,70,102,102,2,0,82,82,114,114,2,
        0,66,66,98,98,1,0,49,57,1,0,48,57,3,0,40,41,123,123,125,125,2,0,
        9,9,32,32,2,0,10,10,12,13,4,0,10,10,13,13,39,39,92,92,4,0,10,10,
        13,13,34,34,92,92,1,0,92,92,2,0,69,69,101,101,2,0,43,43,45,45,5,
        0,0,9,11,12,14,38,40,91,93,127,5,0,0,9,11,12,14,33,35,91,93,127,
        2,0,0,91,93,127,1,0,0,127,4,0,65,91,93,93,95,95,97,122,353,0,1,1,
        0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
        0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,
        0,1,53,1,0,0,0,3,58,1,0,0,0,5,91,1,0,0,0,7,105,1,0,0,0,9,107,1,0,
        0,0,11,109,1,0,0,0,13,111,1,0,0,0,15,118,1,0,0,0,17,121,1,0,0,0,
        19,126,1,0,0,0,21,132,1,0,0,0,23,167,1,0,0,0,25,195,1,0,0,0,27,203,
        1,0,0,0,29,206,1,0,0,0,31,228,1,0,0,0,33,248,1,0,0,0,35,268,1,0,
        0,0,37,296,1,0,0,0,39,300,1,0,0,0,41,303,1,0,0,0,43,306,1,0,0,0,
        45,309,1,0,0,0,47,311,1,0,0,0,49,316,1,0,0,0,51,319,1,0,0,0,53,54,
        5,84,0,0,54,55,5,114,0,0,55,56,5,117,0,0,56,57,5,101,0,0,57,2,1,
        0,0,0,58,59,5,70,0,0,59,60,5,97,0,0,60,61,5,108,0,0,61,62,5,115,
        0,0,62,63,5,101,0,0,63,4,1,0,0,0,64,74,7,0,0,0,65,67,7,1,0,0,66,
        68,7,2,0,0,67,66,1,0,0,0,67,68,1,0,0,0,68,74,1,0,0,0,69,71,7,2,0,
        0,70,72,7,1,0,0,71,70,1,0,0,0,71,72,1,0,0,0,72,74,1,0,0,0,73,64,
        1,0,0,0,73,65,1,0,0,0,73,69,1,0,0,0,73,74,1,0,0,0,74,77,1,0,0,0,
        75,78,3,23,11,0,76,78,3,25,12,0,77,75,1,0,0,0,77,76,1,0,0,0,78,92,
        1,0,0,0,79,81,7,3,0,0,80,82,7,2,0,0,81,80,1,0,0,0,81,82,1,0,0,0,
        82,86,1,0,0,0,83,84,7,2,0,0,84,86,7,3,0,0,85,79,1,0,0,0,85,83,1,
        0,0,0,86,89,1,0,0,0,87,90,3,35,17,0,88,90,3,37,18,0,89,87,1,0,0,
        0,89,88,1,0,0,0,90,92,1,0,0,0,91,73,1,0,0,0,91,85,1,0,0,0,92,6,1,
        0,0,0,93,97,7,4,0,0,94,96,7,5,0,0,95,94,1,0,0,0,96,99,1,0,0,0,97,
        95,1,0,0,0,97,98,1,0,0,0,98,106,1,0,0,0,99,97,1,0,0,0,100,102,5,
        48,0,0,101,100,1,0,0,0,102,103,1,0,0,0,103,101,1,0,0,0,103,104,1,
        0,0,0,104,106,1,0,0,0,105,93,1,0,0,0,105,101,1,0,0,0,106,8,1,0,0,
        0,107,108,3,31,15,0,108,10,1,0,0,0,109,110,7,6,0,0,110,12,1,0,0,
        0,111,115,3,51,25,0,112,114,3,49,24,0,113,112,1,0,0,0,114,117,1,
        0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,116,14,1,0,0,0,117,115,1,0,
        0,0,118,119,5,96,0,0,119,120,3,13,6,0,120,16,1,0,0,0,121,122,3,29,
        14,0,122,123,1,0,0,0,123,124,6,8,0,0,124,18,1,0,0,0,125,127,7,7,
        0,0,126,125,1,0,0,0,127,128,1,0,0,0,128,126,1,0,0,0,128,129,1,0,
        0,0,129,130,1,0,0,0,130,131,6,9,0,0,131,20,1,0,0,0,132,136,5,35,
        0,0,133,135,8,8,0,0,134,133,1,0,0,0,135,138,1,0,0,0,136,134,1,0,
        0,0,136,137,1,0,0,0,137,139,1,0,0,0,138,136,1,0,0,0,139,140,6,10,
        0,0,140,22,1,0,0,0,141,150,5,39,0,0,142,145,5,92,0,0,143,146,3,29,
        14,0,144,146,9,0,0,0,145,143,1,0,0,0,145,144,1,0,0,0,146,149,1,0,
        0,0,147,149,8,9,0,0,148,142,1,0,0,0,148,147,1,0,0,0,149,152,1,0,
        0,0,150,148,1,0,0,0,150,151,1,0,0,0,151,153,1,0,0,0,152,150,1,0,
        0,0,153,168,5,39,0,0,154,163,5,34,0,0,155,158,5,92,0,0,156,159,3,
        29,14,0,157,159,9,0,0,0,158,156,1,0,0,0,158,157,1,0,0,0,159,162,
        1,0,0,0,160,162,8,10,0,0,161,155,1,0,0,0,161,160,1,0,0,0,162,165,
        1,0,0,0,163,161,1,0,0,0,163,164,1,0,0,0,164,166,1,0,0,0,165,163,
        1,0,0,0,166,168,5,34,0,0,167,141,1,0,0,0,167,154,1,0,0,0,168,24,
        1,0,0,0,169,170,5,39,0,0,170,171,5,39,0,0,171,172,5,39,0,0,172,176,
        1,0,0,0,173,175,3,27,13,0,174,173,1,0,0,0,175,178,1,0,0,0,176,177,
        1,0,0,0,176,174,1,0,0,0,177,179,1,0,0,0,178,176,1,0,0,0,179,180,
        5,39,0,0,180,181,5,39,0,0,181,196,5,39,0,0,182,183,5,34,0,0,183,
        184,5,34,0,0,184,185,5,34,0,0,185,189,1,0,0,0,186,188,3,27,13,0,
        187,186,1,0,0,0,188,191,1,0,0,0,189,190,1,0,0,0,189,187,1,0,0,0,
        190,192,1,0,0,0,191,189,1,0,0,0,192,193,5,34,0,0,193,194,5,34,0,
        0,194,196,5,34,0,0,195,169,1,0,0,0,195,182,1,0,0,0,196,26,1,0,0,
        0,197,204,8,11,0,0,198,201,5,92,0,0,199,202,3,29,14,0,200,202,9,
        0,0,0,201,199,1,0,0,0,201,200,1,0,0,0,202,204,1,0,0,0,203,197,1,
        0,0,0,203,198,1,0,0,0,204,28,1,0,0,0,205,207,5,13,0,0,206,205,1,
        0,0,0,206,207,1,0,0,0,207,208,1,0,0,0,208,209,5,10,0,0,209,30,1,
        0,0,0,210,212,7,5,0,0,211,210,1,0,0,0,212,213,1,0,0,0,213,211,1,
        0,0,0,213,214,1,0,0,0,214,217,1,0,0,0,215,217,3,33,16,0,216,211,
        1,0,0,0,216,215,1,0,0,0,217,218,1,0,0,0,218,220,7,12,0,0,219,221,
        7,13,0,0,220,219,1,0,0,0,220,221,1,0,0,0,221,223,1,0,0,0,222,224,
        7,5,0,0,223,222,1,0,0,0,224,225,1,0,0,0,225,223,1,0,0,0,225,226,
        1,0,0,0,226,229,1,0,0,0,227,229,3,33,16,0,228,216,1,0,0,0,228,227,
        1,0,0,0,229,32,1,0,0,0,230,232,7,5,0,0,231,230,1,0,0,0,232,235,1,
        0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,236,1,0,0,0,235,233,1,
        0,0,0,236,238,5,46,0,0,237,239,7,5,0,0,238,237,1,0,0,0,239,240,1,
        0,0,0,240,238,1,0,0,0,240,241,1,0,0,0,241,249,1,0,0,0,242,244,7,
        5,0,0,243,242,1,0,0,0,244,245,1,0,0,0,245,243,1,0,0,0,245,246,1,
        0,0,0,246,247,1,0,0,0,247,249,5,46,0,0,248,233,1,0,0,0,248,243,1,
        0,0,0,249,34,1,0,0,0,250,255,5,39,0,0,251,254,3,41,20,0,252,254,
        3,47,23,0,253,251,1,0,0,0,253,252,1,0,0,0,254,257,1,0,0,0,255,253,
        1,0,0,0,255,256,1,0,0,0,256,258,1,0,0,0,257,255,1,0,0,0,258,269,
        5,39,0,0,259,264,5,34,0,0,260,263,3,43,21,0,261,263,3,47,23,0,262,
        260,1,0,0,0,262,261,1,0,0,0,263,266,1,0,0,0,264,262,1,0,0,0,264,
        265,1,0,0,0,265,267,1,0,0,0,266,264,1,0,0,0,267,269,5,34,0,0,268,
        250,1,0,0,0,268,259,1,0,0,0,269,36,1,0,0,0,270,271,5,39,0,0,271,
        272,5,39,0,0,272,273,5,39,0,0,273,277,1,0,0,0,274,276,3,39,19,0,
        275,274,1,0,0,0,276,279,1,0,0,0,277,278,1,0,0,0,277,275,1,0,0,0,
        278,280,1,0,0,0,279,277,1,0,0,0,280,281,5,39,0,0,281,282,5,39,0,
        0,282,297,5,39,0,0,283,284,5,34,0,0,284,285,5,34,0,0,285,286,5,34,
        0,0,286,290,1,0,0,0,287,289,3,39,19,0,288,287,1,0,0,0,289,292,1,
        0,0,0,290,291,1,0,0,0,290,288,1,0,0,0,291,293,1,0,0,0,292,290,1,
        0,0,0,293,294,5,34,0,0,294,295,5,34,0,0,295,297,5,34,0,0,296,270,
        1,0,0,0,296,283,1,0,0,0,297,38,1,0,0,0,298,301,3,45,22,0,299,301,
        3,47,23,0,300,298,1,0,0,0,300,299,1,0,0,0,301,40,1,0,0,0,302,304,
        7,14,0,0,303,302,1,0,0,0,304,42,1,0,0,0,305,307,7,15,0,0,306,305,
        1,0,0,0,307,44,1,0,0,0,308,310,7,16,0,0,309,308,1,0,0,0,310,46,1,
        0,0,0,311,312,5,92,0,0,312,313,7,17,0,0,313,48,1,0,0,0,314,317,3,
        51,25,0,315,317,7,5,0,0,316,314,1,0,0,0,316,315,1,0,0,0,317,50,1,
        0,0,0,318,320,7,18,0,0,319,318,1,0,0,0,320,52,1,0,0,0,51,0,67,71,
        73,77,81,85,89,91,97,103,105,115,128,136,145,148,150,158,161,163,
        167,176,189,195,201,203,206,213,216,220,225,228,233,240,245,248,
        253,255,262,264,268,277,290,296,300,303,306,309,316,319,1,0,1,0
    ]

class StackMachineLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    TRUE = 1
    FALSE = 2
    STRING = 3
    INTEGER = 4
    FLOAT = 5
    MARKER = 6
    NAME = 7
    NAME_REF = 8
    NEWLINE = 9
    WS = 10
    COMMENT = 11

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'True'", "'False'" ]

    symbolicNames = [ "<INVALID>",
            "TRUE", "FALSE", "STRING", "INTEGER", "FLOAT", "MARKER", "NAME", 
            "NAME_REF", "NEWLINE", "WS", "COMMENT" ]

    ruleNames = [ "TRUE", "FALSE", "STRING", "INTEGER", "FLOAT", "MARKER", 
                  "NAME", "NAME_REF", "NEWLINE", "WS", "COMMENT", "SHORT_STRING", 
                  "LONG_STRING", "LONG_STRING_ITEM", "RN", "EXPONENT_OR_POINT_FLOAT", 
                  "POINT_FLOAT", "SHORT_BYTES", "LONG_BYTES", "LONG_BYTES_ITEM", 
                  "SHORT_BYTES_CHAR_NO_SINGLE_QUOTE", "SHORT_BYTES_CHAR_NO_DOUBLE_QUOTE", 
                  "LONG_BYTES_CHAR", "BYTES_ESCAPE_SEQ", "ID_CONTINUE", 
                  "ID_START" ]

    grammarFileName = "StackMachineLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


